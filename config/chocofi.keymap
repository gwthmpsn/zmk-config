#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include "helper.h"
#include "greek.dtsi"

#define DEFAULT	0
#define SYM	1
#define NUM	2
#define FXN	3
#define NAV	4
#define MSE	5
#define GRK	6

/ {
	macros {
		deg: deg {
			label = "deg";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_release &kp LSHFT>
				, <&macro_press   &kp LALT>
				, <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N6>
				, <&macro_release &kp LALT>
				;
		};
		udo: udo {
			label = "udo";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_press   &kp LCTRL>
				, <&macro_tap     &kp Z>
				, <&macro_release &kp LCTRL>
				;
		};
		rdo: rdo {
			label = "rdo";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_press   &kp LCTRL>
				, <&macro_tap     &kp Y>
				, <&macro_release &kp LCTRL>
				;
		};
		th: th {
			label = "th";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp T>
				, <&macro_release &kp RSHFT>
				, <&macro_tap     &kp H>
				;
		};
		wh: wh {
			label = "wh";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp W>
				, <&macro_release &kp RSHFT>
				, <&macro_tap     &kp H>
				;
		};
		ch: ch {
			label = "ch";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp C>
				, <&macro_release &kp RSHFT>
				, <&macro_tap     &kp H>
				;
		};
		sh: sh {
			label = "sh";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp S>
				, <&macro_release &kp RSHFT>
				, <&macro_tap     &kp H>
				;
		};
		ph: ph {
			label = "ph";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp P>
				, <&macro_release &kp RSHFT>
				, <&macro_tap     &kp H>
				;
		};
		gh: gh {
			label = "gh";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp G>
				, <&macro_release &kp LSHFT>
				, <&macro_tap     &kp H>
				;
		};
		qu: qu {
			label = "qu";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp Q>
				, <&macro_release &kp LSHFT>
				, <&macro_tap     &kp U>
				;
		};
		ing: ing {
			label = "ing";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp I &kp N &kp G>
				;
		};
	};
	combos {
		compatible = "zmk,combos";
		combo_ch {
			timeout-ms = <30>;
			key-positions = <0 1>;
			bindings = <&ch>;
			};
		combo_wh {
			timeout-ms = <30>;
			key-positions = <1 2>;
			bindings = <&wh>;
			};
		combo_ph {
			timeout-ms = <30>;
			key-positions = <2 3>;
			bindings = <&ph>;
			};
		combo_sh {
			timeout-ms = <30>;
			key-positions = <10 11>;
			bindings = <&sh>;
			};
		combo_th {
			timeout-ms = <30>;
			key-positions = <12 13>;
			bindings = <&th>;
			};
		combo_gh {
			timeout-ms = <30>;
			key-positions = <28 29>;
			bindings = <&gh>;
			};
		combo_qu {
			timeout-ms = <30>;
			key-positions = <8 9>;
			bindings = <&qu>;
			};
		combo_ing {
			timeout-ms = <30>;
			key-positions = <18 19>;
			bindings = <&ing>;
			};
		combo_caps_word {
			timeout-ms = <30>;
			key-positions = <13 16>;
			bindings = <&caps_word>;
			};
		combo_greek_sticky_layer {
			timeout-ms = <30>;
			key-positions = <31 34>;
			bindings = <&to 6>;
			};
	};
	behaviors {
		per_com: per_com {								// . ,
			compatible = "zmk,behavior-mod-morph";
			label = "per_com";
			#binding-cells = <0>;
			bindings = <&kp PERIOD>, <&kp COMMA>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		exc_que: exc_que {								// ! ?
			compatible = "zmk,behavior-mod-morph";
			label = "exc_que";
			#binding-cells = <0>;
			bindings = <&kp EXCL>, <&kp QMARK>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		thml: timeless_homerow_mods_left {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
 			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;                // repeat on tap-into-hold
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
			hold-trigger-on-release;             // delay positional check until key-release
		};
		thmr: timeless_homerow_mods_right {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
 			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;                // repeat on tap-into-hold
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
			hold-trigger-on-release;             // delay positional check until key-release
		};
		grk_lshft: greek_left_shift {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
 			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&el_theta>;
			hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
			hold-trigger-on-release;
		};
		grk_rshft: greek_right_shift {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
 			flavor = "balanced";
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <150>;
			bindings = <&kp>, <&el_tau>;
			hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
			hold-trigger-on-release;
		};
	};

	keymap {
		compatible = "zmk,keymap";

        default_layer {
// -------------------------------------------------------------------------------------------------------------------------
// |    Z    |    C    |    W    |    P    |    V    |                   |    H    |    Y    |    O    |    K    |    Q    |
// |    R    |    S    |    N    |    T    |    .    |                   |    '    |    U    |    E    |    A    |    I    |
// |    X    |    M    |    L    |    D    |    ;    |                   |    !    |    F    |    J    |    G    |    B    |
//           		   |   ETR   |   SPC   |   TAB   |            |   DEL   |   BSP   |   SYM   |
//                             num	 sym	   nav			  nav	    sym	      fxn
        	bindings = <
&kp Z			&kp C			&kp W			&kp P			&kp V				&kp H			&kp Y			&kp O			&kp K			&kp Q
&thml LGUI R		&thml LALT S		&thml LCTRL N		&thml LSHFT T		&per_com			&kp APOS		&thmr RSHFT U		&thmr RCTRL E		&thmr RALT A		&thmr RGUI I
&lt MSE X		&kp M			&kp L			&kp D			&kp SEMI			&exc_que		&kp F			&kp J			&kp G			&kp B
						&lt NUM ENTER		&lt SYM SPACE		&lt NAV TAB			&lt NAV DEL 		&lt SYM BSPC		&lt FXN ESC
            >;
        };

	// Symbolic layer
        sym {
		bindings = <
&none			&kp AT			&kp HASH		&kp LBKT		&kp GRAVE			&deg			&kp RBKT		&kp DLLR     		&kp PRCNT     		&none
&thml LGUI AMPS		&thml LALT EQUAL	&thml LCTRL KP_PLUS 	&thml LSHFT LPAR	&trans				&trans			&thmr RSHFT RPAR	&thmr RCTRL KP_MINUS 	&thmr RALT UNDER	&thmr RGUI PIPE
&kp LT 			&kp CARET		&kp ASTRK		&kp LBRC		&trans				&trans 			&kp RBRC		&kp FSLH		&kp BSLH		&kp GT
						&trans			&trans			&trans		  		&trans			&trans    		&trans
            >;
        };

		
	// Numpad layer
	num {
        	bindings = <
&bt BT_CLR		&none			&none    		&none			&none        			&kp KP_SLASH   		&kp N7			&kp N8    		&kp N9			&kp KP_MINUS 
&kp LGUI		&kp LALT		&kp LCTRL		&kp LSHFT		&none				&kp ASTRK		&kp N4			&kp N5			&kp N6			&kp KP_PLUS
&none	  		&none  			&none 	  		&none			&none	         		&none	 		&kp N1			&kp N2			&kp N3			&kp ENTER
						&trans			&trans			&trans  			&trans			&kp N0    		&kp PERIOD
            >;
        };

	// Function key layer
	fxn {
        	bindings = <
&kp F9			&kp F10			&kp F11    		&kp F12			&kp PSCRN      			&none    		&none			&none    		&none			&bt BT_CLR 
&thml LGUI F5		&thml LALT F6		&thml LCTRL F7		&thml LSHFT F8		&kp INS				&none    		&none			&none    		&none			&none
&kp F1  		&kp F2 			&kp F3 	  		&kp F4			&kp PAUSE_BREAK        		&none    		&none			&none    		&none			&none
						&kp K_APP		&trans			&trans  			&trans			&trans    		&trans
            >;
        };

	// Navigation layer
        nav {
        	bindings = <
&none			&none			&none			&none			&none		       		&kp C_BRI_UP		&kp HOME		&kp PG_DN 		&kp PG_UP		&kp END
&kp LGUI		&kp LALT		&kp LCTRL		&kp LSHFT		&kp C_PP            		&kp C_PP		&kp LEFT		&kp DOWN  		&kp UP			&kp RIGHT  
&udo			&rdo			&none			&none			&none	          		&kp C_BRI_DN		&kp C_PREV		&kp C_VOL_DN		&kp C_VOL_UP		&kp C_NEXT
						&trans			&trans			&trans  			&trans			&trans    		&trans
            >;
        };

	// Mouse Emulation Layer
	mse {
            	bindings = <
&none			&none			&none    		&none			&none        			&none			&none			&none    		&none			&none
&kp LGUI		&kp LALT		&kp LCTRL		&kp LSHFT		&none				&none			&none			&none    		&none			&none 
&none	  		&none  			&none 	  		&none			&none	         		&none			&none			&none    		&none			&none 
						&trans			&trans			&trans  			&mkp RCLK		&mkp LCLK    		&mkp MCLK
            >;
        };

	// Greek Layer
	grk {
		bindings = <
&el_zeta		&el_chi			&el_omega		&el_pi			&none				&none			&el_upsilon		&el_omikron		&el_kappa		&el_psi
&el_rho			&el_sigma		&el_nu			&grk_lshft LSHFT 0	&trans				&trans			&grk_rshft RSHFT 0	&el_epsilon		&el_alpha		&el_iota
&el_xi			&el_mu			&el_lambda		&el_delta		&trans				&trans			&el_phi			&el_eta			&el_gamma		&el_beta
						&trans			&trans			&trans				&trans	 		&trans			&to 0
            >;
        };

    };
};
