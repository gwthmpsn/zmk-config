#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT	0
#define SYM	1
#define NUM	2
#define NAV	3
// Would love to have a greek layer :(

/ {
	macros {
		deg: deg {
			label = "deg";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_release &kp LSHFT>
				, <&macro_press   &kp LALT>
				, <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N6>
				, <&macro_release &kp LALT>
				;
		};
		cut: cut {
			label = "cut";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_press   &kp LCTRL>
				, <&macro_tap     &kp X>
				, <&macro_release &kp LCTRL>
				;
		};
		cpy: cpy {
			label = "cpy";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_press   &kp LCTRL>
				, <&macro_tap     &kp C>
				, <&macro_release &kp LCTRL>
				;
		};
		pst: pst {
			label = "pst";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_press   &kp LCTRL>
				, <&macro_tap     &kp V>
				, <&macro_release &kp LCTRL>
				;
		};
		udo: udo {
			label = "udo";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_press   &kp LCTRL>
				, <&macro_tap     &kp Z>
				, <&macro_release &kp LCTRL>
				;
		};
		rdo: rdo {
			label = "rdo";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_press   &kp LCTRL>
				, <&macro_tap     &kp Y>
				, <&macro_release &kp LCTRL>
				;
		};
		th: th {
			label = "th";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp T>
				, <&macro_release &kp RSHFT>
				, <&macro_tap     &kp H>
				;
		};
		wh: wh {
			label = "wh";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp W>
				, <&macro_release &kp RSHFT>
				, <&macro_tap     &kp H>
				;
		};
		ch: ch {
			label = "ch";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp C>
				, <&macro_release &kp RSHFT>
				, <&macro_tap     &kp H>
				;
		};
		sh: sh {
			label = "sh";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp S>
				, <&macro_release &kp RSHFT>
				, <&macro_tap     &kp H>
				;
		};
		ph: ph {
			label = "ph";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp P>
				, <&macro_release &kp RSHFT>
				, <&macro_tap     &kp H>
				;
		};
		gh: gh {
			label = "gh";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp G>
				, <&macro_release &kp LSHFT>
				, <&macro_tap     &kp H>
				;
		};
		qu: qu {
			label = "qu";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp Q>
				, <&macro_release &kp LSHFT>
				, <&macro_tap     &kp U>
				;
		};
		ing: ing {
			label = "ing";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings
				= <&macro_tap     &kp I &kp N &kp G>
				;
		};
	};
	combos {
		compatible = "zmk,combos";
		combo_ch {
			timeout-ms = <30>;
			key-positions = <1 2>;
			bindings = <&ch>;
			};
		combo_wh {
			timeout-ms = <30>;
			key-positions = <2 3>;
			bindings = <&wh>;
			};
		combo_ph {
			timeout-ms = <30>;
			key-positions = <3 12>;
			bindings = <&ph>;
			};
		combo_sh {
			timeout-ms = <30>;
			key-positions = <11 12>;
			bindings = <&sh>;
			};
		combo_th {
			timeout-ms = <30>;
			key-positions = <12 13>;
			bindings = <&th>;
			};
		combo_gh {
			timeout-ms = <30>;
			key-positions = <27 28>;
			bindings = <&gh>;
			};
		combo_qu {
			timeout-ms = <30>;
			key-positions = <16 17>;
			bindings = <&qu>;
			};
		combo_ing {
			timeout-ms = <30>;
			key-positions = <18 19>;
			bindings = <&ing>;
			};
	};
	behaviors {
		mo_tog: behavior_mo_tog {
			compatible = "zmk,behavior-hold-tap";
			label = "mo_tog";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			bindings = <&mo>, <&tog>;
		};
		per_com: per_com {								// . ,
			compatible = "zmk,behavior-mod-morph";
			label = "per_com";
			#binding-cells = <0>;
			bindings = <&kp PERIOD>, <&kp COMMA>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		exc_que: exc_que {								// ! ?
			compatible = "zmk,behavior-mod-morph";
			label = "exc_que";
			#binding-cells = <0>;
			bindings = <&kp EXCL>, <&kp QMARK>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		ast_car: ast_car {								// * ^
			compatible = "zmk,behavior-mod-morph";
			label = "ast_car";
			#binding-cells = <0>;
			bindings = <&kp ASTRK>, <&kp CARET>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		fsl_bsl: fsl_bsl {								// Forward and Back Slashes
			compatible = "zmk,behavior-mod-morph";
			label = "fsl_bsl";
			#binding-cells = <0>;
			bindings = <&kp FSLH>, <&kp BSLH>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		tab_etr: tab_enter {							// TAB ENTER
			compatible = "zmk,behavior-mod-morph";
			label = "TAB_ENTER";
			#binding-cells = <0>;
			bindings = <&kp TAB>, <&kp ENTER>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		bsp_del: bspc_del {							// BSPC DEL
			compatible = "zmk,behavior-mod-morph";
			label = "bspc_del";
			#binding-cells = <0>;
			bindings = <&kp BSPC>, <&kp DEL>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
		lt_tab_ent: layer_tap_tab_enter {								// I want this to be space, enter, or layer
			compatible = "zmk,behavior-hold-tap";
		    	label = "LAYER_TAP_TAB_ENTER";
		    	#binding-cells = <2>;
		    	bindings = <&mo>, <&tab_etr>;
		    	tapping-term-ms = <200>;
		};
		lt_bsp_del: layer_tap_bspc_del {								// I want this to be bspc, del, or layer
			compatible = "zmk,behavior-hold-tap";
		    	label = "LAYER_TAP_BACKSPACE_DELETE";
		    	#binding-cells = <2>;
		    	bindings = <&mo>, <&bsp_del>;
		    	tapping-term-ms = <200>;
		};
		hm: balanced_homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			tapping-term-ms = <200>;    // <---[[moderate duration, was 200]]
			quick-tap-ms = <50>;
			flavor = "balanced";
			bindings = <&kp>, <&kp>;
		};
	};

	keymap {
		compatible = "zmk,keymap";

        default_layer {
// -------------------------------------------------------------------------------------------------------------------------
// |    Q    |    C    |    W    |    P    |    V    |                   |    H    |    Y    |    O    |    K    |    Z    |
// |    R    |    S    |    N    |    T    |    .    |                   |    '    |    U    |    E    |    A    |    I    |
// |    X    |    M    |    L    |    D    |    ;    |                   |    !    |    F    |    J    |    G    |    B    |
//           		   |   ESC   |   SPC   |   TAB   |            |   ETR   |   BSP   |   SYM   |
//                             sym	 num	   nav			  nav	    del	      sym
            bindings = <
&kp Q		&kp C		&kp W		&kp P		&kp V					&kp H		&kp Y		&kp O		&kp K		&kp Z
&kp R		&hm LALT S	&hm LCTRL N	&hm LSHFT T	&per_com				&kp APOS	&hm RSHFT U	&hm RCTRL E	&hm RALT A	&kp I
&hm LGUI X	&kp M		&kp L		&kp D		&kp SEMI				&exc_que	&kp F		&kp J		&kp G		&hm RGUI B
						&lt SYM ESC	&lt NUM SPACE	&lt NAV TAB				&lt NAV ENTER &lt_bsp_del 2 0	&mo_tog 1 1
            >;
        };

	// Symbolic layer
        sym {
			bindings = <
&kp GRAVE			&kp AT				&kp HASH			&kp LBRC			&none					&none			&kp RBKT			&kp DLLR     		&kp PRCNT     		&deg
&hm LGUI AMPS 		&hm LALT EQUAL		&hm LCTRL KP_PLUS 	&hm LSHFT LPAR 		&trans					&trans			&hm RSHFT RPAR 		&hm RCTRL KP_MINUS 	&hm RALT UNDER 		&hm RGUI PIPE
&none 				&kp LT				&ast_car			&kp LBRC			&trans					&trans 			&kp RBRC			&fsl_bsl			&kp GT				&none
										&trans				&trans				&trans  				&trans			&trans    			&trans
            >;
        };

		
	// Funco-numeric key layer
		num {
            bindings = <
&kp F1				&kp F2				&kp F3    			&kp F4				&kp F5        			&kp F6    		&kp F7				&kp F8    			&kp F9				&kp F10 
&kp LGUI			&hm LALT KP_N1		&hm LCTRL KP_N2		&hm LSHFT KP_N3		&none					&none			&hm RSHFT KP_N6		&hm RCTRL KP_N7		&hm RALT KP_N8		&kp RGUI  
&kp KP_NUM  		&none  				&kp KP_N4 	  		&kp KP_N5			&kp F11         		&kp F12 		&kp KP_N9			&kp KP_N0			&none				&kp KP_NUM    
										&trans				&trans				&trans  				&trans			&trans    			&trans

            >;
        };

	// Navigation layer
        nav {
            bindings = <
&bt BT_CLR			&kp K_APP			&kp C_BRI_UP		&kp C_VOL_UP		&kp C_PREV        		&kp PG_UP		&kp HOME			&kp PSCRN 			&kp PAUSE_BREAK		&bt BT_CLR
&kp LGUI			&kp LALT			&kp LCTRL			&kp LSHFT			&kp C_PP            	&kp INS			&kp LEFT			&kp DOWN  			&kp UP				&kp RIGHT  
&udo				&rdo				&kp C_BRI_DN		&kp C_VOL_DN		&kp C_NEXT          	&kp PG_DN		&kp END				&cut				&cpy				&pst
										&trans				&trans				&trans  				&trans			&trans    			&trans

            >;
        };
    };
};

/*
	// trans layer
		trans {
            bindings = <
&trans		&trans		&trans		&trans		&trans			&none		&none		&none		&none		&none
&trans		&trans		&trans		&trans		&trans			&none		&none		&none		&none		&none
&trans 		&trans		&trans		&trans		&trans			&none		&none		&none		&none		&none
				&trans		&trans		&trans  		&trans		&trans    	&trans
            >;
        };
*/
